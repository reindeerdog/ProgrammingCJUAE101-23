#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void generateRandomArray(int isFloat, double *arr, int n, double min, double max) 
{
    for (int i = 0; i < n; i++) 
    {
        double randomValue = min + (double)rand() / RAND_MAX * (max - min);
        if (!isFloat) 
        {
            randomValue = (int)randomValue;  // 정수로 변환
        }
        *(arr + i) = randomValue;
        
    }
}

void CalcsortArray(double* arr, int n, int ascending) 
{
    for (int i = 0; i < n - 1; i++) 
    {
        for (int j = 0; j < n - i - 1; j++) 
        {
            if ((ascending && *(arr + j) > *(arr + j + 1)) || (!ascending && *(arr + j) < *(arr + j + 1))) 
            {
                double temp = *(arr + j);
                *(arr + j) = *(arr + j + 1);
                *(arr + j + 1) = temp;
            }
        }
    }
}

void printArray(double* arr, int n) 
{
    for (int i = 0; i < n; i++) 
    {
        printf("%.2f ", *(arr + i));  // 포인터를 사용하여 배열 원소 출력
    }
    printf("\n");
}

int main() 
{
    const int n = 10;
    double arr[n];
    double min = -100.0, max = 100.0;

    srand(time(NULL)); // 랜덤 시드 설정

    int choice;
    printf("1. 정수 배열 생성\n2. 실수 배열 생성\n선택하세요: ");
    scanf_s("%d", &choice);

    if (choice == 1) 
    {
        printf("\n정수 배열을 생성합니다...\n");
        generateRandomArray(0, arr, n, min, max);  // 정수 배열 생성
    }
    else if (choice == 2) 
    {
        printf("\n실수 배열을 생성합니다...\n");
        generateRandomArray(1, arr, n, min, max);  // 실수 배열 생성
    }
    else 
    {
        printf("잘못된 선택입니다.\n");
        return 1;
    }

    printf("\n생성된 배열: ");
    printArray(arr, n);

    int sortChoice;
    printf("\n1. 오름차순 정렬\n2. 내림차순 정렬\n선택하세요: ");
    scanf_s("%d", &sortChoice);

    if (sortChoice == 1) 
    {
        CalcsortArray(arr, n, 1);  // 오름차순
        printf("\n오름차순 정렬 결과: ");
    }
    else if (sortChoice == 2) 
    {
        CalcsortArray(arr, n, 0);  // 내림차순
        printf("\n내림차순 정렬 결과: ");
    }
    else 
    {
        printf("잘못된 선택입니다.\n");
        return 1;
    }
    printArray(arr, n);

    return 0;
}
